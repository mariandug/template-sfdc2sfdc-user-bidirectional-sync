<?xml version="1.0"?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Salesforce to Salesforce User Bidirectional Synchronization</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
<![CDATA[
This Template should serve as a foundation for setting an online bi-directional sync of Users between two Salesforce instances with ability to specify filtering criteria.
The main behavior of this template is fetching data for changes (new or modified Users) using scheduler or http component that have occurred in any of the Salesforce instances during a certain defined period of time. For those Users that both have not been updated yet the integration triggers an upsert (update or create depending the case) taking the last modification as the one that should be applied.
]]>	</section>
		<section id="considerations">
<![CDATA[
There are a couple of things you should take into account before running this kick:

1. **Users cannot be deleted in SalesForce:** For now, the only thing to do regarding users removal is disabling/deactivating them, but this won't make the username available for a new user.
2. **Each user needs to be associated to a Profile:** SalesForce's profiles are what define the permissions the user will have for manipulating data and other users. Each SalesForce account has its own profiles. Check out the next section to define a map between Profile Ids (from the source account to the ones in the target account and the other way around).
3. **Working with sandboxes for the same account**: Although each sandbox should be a completely different environment, Usernames cannot be repeated in different sandboxes, i.e. if you have a user with username *bob.dylan* in *sandbox A*, you will not be able to create another user with username *bob.dylan* in *sandbox B*. If you are indeed working with Sandboxes for the same SalesForce account you will need to map the source username to a different one in the target sandbox, for this purpose, please refer to the processor labeled *assign ProfileId and Username to the User*.
]]>
		</section>
		<section id="application_configuration">
		<![CDATA[
#### Application configuration

+ scheduler.frequency `10000`  
This are the milliseconds that will run between two different checks for updates in either Salesforce instance

+ scheduler.startDelay `0`

+ watermark.default.expression `2018-02-25T11:00:00.000Z`  
This property is an important one, as it configures what should be the start point of the synchronization. If the use case includes synchronization of every 
user created from the begining of the times, you should use a date previous to any user creation (perhaphs `1900-01-01T08:00:00.000Z` is a good choice). 
If you want to synchronize the users created from now on, then you should use a default value according to that requirement (for example, 
if today is April 21st of 2018 and it's eleven o'clock in London, then you could use the following value `2018-04-21T11:00:00.000Z`).

+ page.size `1000`


#### SalesForce Connector configuration for company A

+ sfdc.a.username `jorge.drexler@mail.com`
+ sfdc.a.password `Noctiluca123`
+ sfdc.a.securityToken `avsfwCUl7apQs56Xq2AKi3X`
+ sfdc.a.integration.user.id `A0ed000BO9T`

	**Note:** To find out the correct *sfdc.a.integration.user.id* value, please, refer to example project **Salesforce Data Retrieval** in [Anypoint Exchange](http://www.mulesoft.org/documentation/display/current/Anypoint+Exchange).

#### SalesForce Connector configuration for company B

+ sfdc.b.username `mariano.cozzi@mail.com`
+ sfdc.b.password `LaRanitaDeLaBicicleta456`
+ sfdc.b.securityToken `ces56arl7apQs56XTddf34X`
+ sfdc.b.integration.user.id `B0ed000BO9T`

	**Note:** To find out the correct *sfdc.b.integration.user.id* value, please, refer to example project **Salesforce Data Retrieval** in [Anypoint Exchange](http://www.mulesoft.org/documentation/display/current/Anypoint+Exchange).

SalesForce's profiles are what define the permissions the user will have for manipulating data and other users.
Each SalesForce account has its own profiles.

This should be a map that associates a profile in sfdc A with a profile in sfdc B
for example: ['SOME_PROFILE_IN_A': 'SOME_PROFILE_IN_B', 'ANOTHER_PROFILE_IN_A': 'ANOTHER_PROFILE_IN_B']

+ sfdc.a.profile.id  `['00e200000015oKF': '00e20000001UzDx']`

This should be a map that associates a profile in sfdc B with a profile in sfdc A
for example: ['SOME_PROFILE_IN_B': 'SOME_PROFILE_IN_A', 'ANOTHER_PROFILE_IN_B': 'ANOTHER_PROFILE_IN_A']

+ sfdc.b.profile.id `['00e200000015oKF': '00e20000001UzDx']`

The meaning of the properties above is defined in the second consideration on [the previous section](#afewconsiderations)

#### Test configuration
email.a.b 'test@test.com'

]]>
		</section>
		<section id="api_calls">
		<![CDATA[
Not relevant for this use case.
]]> 
		</section>
		<section id="default_endpoints_xml">
		<![CDATA[
This file should contain every inbound and outbound endpoint of your integration app. 
In this particular template, this file contains a scheduler endpoint that query Salesforce A and Salesforce B for updates using watermark and http endpoint for push operation.
]]>
		</section>
		<section id="default_business_logic_xml">
		<![CDATA[
This file holds the functional aspect of the template. Its main component is a [Batch Job](http://www.mulesoft.org/documentation/display/current/Batch+Processing), and it includes steps for both executing the synchronization from Salesforce A to Salesforce B, and the other way around.
]]>
		</section>
		<section id="default_error_handling_xml">
		<![CDATA[
		This is the right place to handle how your integration will react depending on the different exceptions. 
This file holds a [Error Handling](http://www.mulesoft.org/documentation/display/current/Error+Handling) that is referenced by the scheduler flow in the endpoints xml file.]]>
		</section>
	</sections>
</configuration>